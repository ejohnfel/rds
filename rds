#!/bin/bash

declare -a includes
declare -a targets

targetCount=0
count=0

TERMINATE=0
CMDSFILE=cmds.txt
SESSION=${HOSTNAME}.`date +%F.%H-%M-%s`.${RANDOM}
SCRIPT=${SESSION}.sh
TARFILE=${SESSION}.tgz

#
# 0. Create Execute script
# 1. Tar up files
# 2. Copy TAR file and Execute Script over to target
# 3. Execute Script
#
# Tar file must contain all required files and a "cmds.txt" file to be fed to the execute script
#

# Usage
function Usage()
{
	echo -e "RDS - Remote Distributed Scripting"
	echo -e "=================================="
	echo -e "rds -t [target host] -c [cmd file] [file 1] [file 2] ... [file n]"
	echo -e "rds -f [list of targets] -c [cmd file] [file 1] [file 2] ... [file n]"
	echo -e "rds -p [profile]"
	echo -e "=================================="
	echo -e "RDS defaults to 'cmds.txt' if command file not provided"
	echo -e "* Generally only works when in an SSH-AGENT Shell"
}

# Create Execution Script
function CreateExecuteScript()
{
	cat > /tmp/${SESSION}/${SCRIPT}<<eof
#!/bin/bash
pushd /tmp > /dev/null

tar -xzf ${TARFILE}

rm ${TARFILE}

pushd /tmp/${SESSION} > /dev/null

source ${CMDSFILE}

dirs -c > /dev/null

rm -R /tmp/${SESSION}
eof

	chmod u+rx /tmp/${SESSION}/${SCRIPT}
}

# Add host To Target
# Parameters : [host]
function AddTarget()
{
	targets[${targetCount}]="${1}"
	targetCount=$(( ${targetCount} + 1 ))
}

# Add Targets To Target
# Parameters : [target file]
function AddTargets()
{
	while read target rem; do
		AddTarget "${target}"
	done < "${1}"
}

# AddFile : To includes
# Parameter : [filename]
function AddFile()
{
	includes[${count}]="${1}"
	count=$(( ${count} + 1 ))
}

# ProcessProfile : Process profile
# Parameters : [profile]
function ProcessProfile()
{
	while read label value1 value2 value3 value4; do
		case "${label}" in
		"target")	AddTarget "${value1}" ;;
		"file")		AddFile "${value1}" ;;
		"cmds")		CMDSFILE="${value1}" ;;
		esac
	done < "${1}"
}

# CreateSession : Create Session folder
function CreateSession()
{
	echo -e "Creating Session..."
	mkdir /tmp/${SESSION}

	CreateExecuteScript

	cp "${CMDSFILE}" /tmp/${SESSION}

	for ((index=0; index < ${#includes[@]}; ++index)); do
		ITEM="${includes[${index}]}"

		if [ ! -f ${ITEM} ]; then
			read -p "${ITEM} is missing, continue anyway (y/n)? "

			if [ ${REPLY} = "y" -o ${REPLY} = "Y" ]; then
				continue
			else
				TERMINATE=1

				break
			fi
		fi

		cp ${ITEM} /tmp/${SESSION}
	done
}

#
# Main Loop
#

if [ "${SSH_AGENT_PID}" = "" ]; then
	echo -e "SSH Agent doesn't appear to be running, let me fix that..."

	eval `ssh-agent -s`

	ssh-add
fi

while [ ! "${1}" = "" ]; do
	case "${1}" in
	"-t")	AddTarget "${2}"
		shift 1 ;;
	"-f")	AddTargets "${2}"
		shift 1 ;;
	"-p")	ProcessProfile "${2}"
		shift 1 ;;
	"-h")	Usage
		exit ;;
	"-c")	CMDSFILE="${2}"
		shift 1 ;;
	*)	AddFile "${1}" ;;
	esac

	shift 1
done

if [ ! -f ${CMDSFILE} ]; then
	echo -e "There does not appear to be a commands file..."
	read -p "Create one (y/n)? "

	if [ "${REPLY}" = "y" ]; then
		TMP=/tmp/tmp.${RANDOM}

	cat > "${TMP}"<<eof
#
# Example cmds.txt file
#
# This file should contain all the commands required to complete a remote distribution.
# This works for copying files and then *doing* something, as well as copying nothing
# and just executing commands. Either way, this is where the commands to be executed go.
# The folder where each command is executed, is the temporary folder in which the
# file archive was extracted to. So assume nothing about the PATH variable and if you
# must access things outside of the temp folder, use absolute pathes and/or pushd-popd
# or 'cd' to get to the right location. Pushd and popd are the preferred method since
# popd will return execution to the initial temporary directory when you need to go back
# there. Any files included with the archive that is copied, can only be referenced
# from the initial folder, or via the "${SRCFOLDER}" environment variable
#
# Examples
#
# sudo cp file1.py /usr/local/bin
# ps -ef > /srv/storage/collection_point/${HOSTNAME}.processes.txt
# cp "${SRCFOLDER}/hippityhoppity.sh" /usr/local/bin

eof

		nano "${TMP}"

		[ ! -z "${TMP}" ] && mv "${TMP}" "${CMDSFILE}"
		[ -f "${TMP}" ] && rm "${TMP}"
	fi
fi

if [ -f ${CMDSFILE} ]; then

	[ ! -f /tmp/${SESSION} ] && CreateSession

	[ ${TERMINATE} -eq 1 ] && exit 1

	pushd /tmp > /dev/null

	echo -e "Packing files for transfer..."
	tar -czf ${TARFILE} ${SESSION}

	for ((index=0; index < ${#targets[@]}; ++index)); do
		TARGET=${targets[${index}]}
		echo -e "--> Transferring to ${TARGET}..."
		echo -e "Transferring control script..."
		scp /tmp/${SESSION}/${SCRIPT} ${USERNAME}@${TARGET}:/tmp/${SCRIPT} > /dev/null
		echo -e "Transferring files..."
		scp /tmp/${TARFILE} ${USERNAME}@${TARGET}:/tmp/${TARFILE} > /dev/null
		echo -e "Executing control script..."
		slogin ${USERNAME}${TARGET} "/bin/bash /tmp/${SCRIPT}" > /dev/null
		echo -e "Cleaning up.."
		slogin ${USERNAME}${TARGET} "rm /tmp/${SCRIPT}" > /dev/null
		echo -e "Done..."
	done

	popd > /dev/null
fi

[ -e /tmp/${SCRIPT} ] && rm /tmp/${SCRIPT}
[ -e /tmp/${TARFILE} ] && rm /tmp/${TARFILE}
[ -e /tmp/${SESSION} ] && rm -R /tmp/${SESSION}
